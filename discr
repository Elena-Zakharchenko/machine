#include <iostream>
#include <cmath>

int main()
{
    float a = 0;
    float b = 0;
    float c = 0;
    float x1 = 0;
    float x2 = 0;                       // Здесь явно не хватает инициализации переменных после их обьявления. Это все таки не Питон, за вас это никто не сделает)
    float discr = 0;
    std::cout << "Enter the coefficients a, b и c: ";     // Пользователи из Германии уже на этой строчке начинают набирать гневный комментарий в Steam-е. Они хотят английскую локализацию а не русскую. Да и рынок там более платежеспособный, может стоит перейти на английский?)
    std::cin >> a >> b >> c;
    discr = b*b - 4*a*c;
    
if (abs(a) < 0.000000001)
    {
        if (abs(b) < 0.000000001)
        {
            if (abs(c) < 0.000000001)
            {
                std::cout << "infinitely many solutions";
            }
            else
            {
                std::cout << "error";
            }
        }
        else
        {
            std::cout << "error";
        }
    }
    else
    {
        if (discr > 0)
        {
            x1 = (-b + sqrt(discr)) / (2*a);                // А если a == 0 то как жить? Я бы очень не хотел купить приложение AppStore и страдать от того что приложения на линейное уравнение не то что не ругается а вообще падает)
            x2 = (-b - sqrt(discr)) / (2*a);
            std::cout << "x1 = " << x1 << "std::endl";      // вместо << "\n" лучше использовать << std::endl
            std::cout << "x2 = " << x2 << "std::endl";
        }
    
        else if (abs(discr) < 0.000000001)                                // Сравнение float с другими числами более нетривиально чем кажется из за представления float в памяти. Нецелых чисел на любом отрезке бесконечно а возможности их закодировать конечное число. Из за этого лучше пользоваться сравнением чисел x и y как |x - y| < 0.00001 тогда x и y равны с точностью до 0.00001
        {
            x1 = (-b + sqrt(discr)) / (2*a);               
            std::cout << "x1 = " << x1;
        }                                                   // Кнопка enter очень обиделась на этой строчке. Она явно хотела чтобы } и return разделяла пустая строка.
    }
    
    return 0;
}

// А если a, b, c одновременно равны нулю? Как тогда жить? Ответ же: бесконечно много решений. А тут непонятно.
// А если a и b равны нулю, а с нет, тогда вроде вообще не должно быть решений никаких.
